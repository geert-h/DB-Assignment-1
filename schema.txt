CREATE TABLE IF NOT EXISTS "Account"
(
    [accountId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [username] NVARCHAR(255) NOT NULL,
    [hashedPassword] NVARCHAR(255) NOT NULL,
    [birthDate] DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS "Save" 
(
	[saveId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	[saveName] NVARCHAR(255) NOT NULL,
	[minutesPlayed] INTEGER NOT NULL,
	[accountId] INTEGER NOT NULL,
	FOREIGN KEY ([accountId]) REFERENCES "Account" ([accountId]) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS "Character"
(
	[characterName] NVARCHAR(255) NOT NULL,
	[maxHP] INTEGER NOT NULL,
	[currentHP] INTEGER NOT NULL,
	[level] INTEGER NOT NULL,
	[currencyCount] INTEGER NOT NULL,
	[strength] INTEGER NOT NULL,
	[itemCount] INTEGER NOT NULL,
	[maxWeight] INTEGER NOT NULL,
	[currentWeight] INTEGER NOT NULL,
	[equippedItem] INTEGER NOT NULL,
	[characterId] INTEGER NOT NULL,
	FOREIGN KEY ([equippedItem]) REFERENCES "Item" ([itemId]),
	FOREIGN KEY ([characterId]) REFERENCES "Save" ([SaveId]) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS "Inventory"
(
	[itemId] INTEGER NOT NULL,
	[stackAmount] INTEGER NOT NULL,
	[inventoryId] INTEGER NOT NULL,
	CONSTRAINT 'maxStackAmount',
	FOREIGN KEY ([itemId]) REFERENCES "Item" ([itemId])
	FOREIGN KEY ([inventoryId]) REFERENCES "Character" ([characterId]) ON DELETE CASCADE
);

CREATE TRIGGER IF NOT EXISTS maxStackAmountTriggerInventory
BEFORE INSERT ON Inventory
FOR EACH ROW
WHEN NEW.stackAmount > (SELECT maxStackSize FROM Item WHERE Item.itemId = NEW.itemId)
BEGIN
    SELECT RAISE(ABORT, 'stackAmount exceeds maxStackSize for this item');
END;

CREATE TABLE IF NOT EXISTS "Item" 
(
	[itemId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	[itemName] NVARCHAR(255) NOT NULL,
	[maxStackSize] INTEGER NOT NULL,
	[sellValue] INTEGER
);

CREATE TABLE IF NOT EXISTS "Equipable"
(
	[weight] INTEGER NOT NULL,
	[itemId] INTEGER NOT NULL,
	FOREIGN KEY ([itemId]) REFERENCES "Item" ([itemId])
);

CREATE TABLE IF NOT EXISTS "Armor"
(
	[defense] INTEGER NOT NULL,
	[armorType] NVARCHAR(10) NOT NULL,
	[itemId] INTEGER NOT NULL,
	CONSTRAINT 'armorSlot' CHECK(armorType IN ('Head', 'Torso', 'legs', 'Feet')),
	FOREIGN KEY ([itemId]) REFERENCES "Equipable" ([itemId])
);

CREATE TABLE IF NOT EXISTS "Handheld"
(
	[damage] INTEGER NOT NULL,
	[block] INTEGER NOT NULL,
	[weaponType] INTEGER NOT NULL,
	[weaponRange] INTEGER NOT NULL,
	[itemId] INTEGER NOT NULL,
	CONSTRAINT 'weaponSlot' CHECK(weaponType IN ('melee', 'ranged', 'shield')),
	FOREIGN KEY ([itemId]) REFERENCES "Equipable" ([itemId])
);

CREATE TABLE IF NOT EXISTS "Stackable"
(
	[itemId] INTEGER NOT NULL,
	FOREIGN KEY ([itemId]) REFERENCES "Item" ([itemId])
);

CREATE TABLE IF NOT EXISTS "Consumable"
(
	[useCount] INTEGER NOT NULL,
	[usedCount] INTEGER NOT NULL,
	[buffType] NCHAR(10) NOT NULL,
	[buffAmount] INTEGER NOT NULL,
	[buffDuration] INTEGER, -- If NULL the buff is permanent
	[itemId] INTEGER NOT NULL,
	CONSTRAINT 'buffName' CHECK(buffType IN ('HP', 'maxHP', 'Strength', 'maxWeight', 'defense'))
	FOREIGN KEY ([itemId]) REFERENCES "Item" ([itemId])
);

CREATE TABLE IF NOT EXISTS "NPC"
(
	[NPCId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	[NPCName] NVARCHAR(255) NOT NULL,
	[maxHP] INTEGER NOT NULL,
	[currentHP] INTEGER NOT NULL,
	[droppedCurrency] INTEGER NOT NULL,
	[Strength] INTEGER NOT NULL,
	[droppedXP] INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS "NPCItems"
(
	[itemId] INTEGER NOT NULL,
	[NPCId] INTEGER NOT NULL,
	[isEquipped] BIT NOT NULL,
	[dropChance] INTEGER NOT NULL CHECK(dropChance <= 100),
	[stackAmount] INTEGER NOT NULL,
	CONSTRAINT 'maxStackAmount',
	FOREIGN KEY ([itemId]) REFERENCES "Item" ([itemId]),
	FOREIGN KEY ([NPCId]) REFERENCES "NPC" ([NPCId])
);

CREATE TRIGGER IF NOT EXISTS maxStackAmountTriggerNPCItems
BEFORE INSERT ON NPCItems
FOR EACH ROW
WHEN NEW.stackAmount > (SELECT maxStackSize FROM Item WHERE Item.itemId = NEW.itemId)
BEGIN
    SELECT RAISE(ABORT, 'stackAmount exceeds maxStackSize for this item');
END;

CREATE TABLE IF NOT EXISTS "RemainingNPCs"
(
	[NPCId] INTEGER NOT NULL,
	CONSTRAINT 'InBossOrDialogueNPC'
	FOREIGN KEY ([NPCId]) REFERENCES "NPC" ([NPCId])
);

CREATE TRIGGER IF NOT EXISTS InBossOrDialogueNPCTrigger
BEFORE INSERT ON RemainingNPCs
FOR EACH ROW
WHEN NEW.NPCId NOT IN (SELECT NPCId FROM DialogueNPC UNION SELECT NPCId FROM Boss)
BEGIN
    SELECT RAISE(ABORT, 'This NPC is not a  Boss or a DialogueNPC');
END;

CREATE TABLE IF NOT EXISTS "DialogueNPC"
(
	[NPCId] INTEGER NOT NULL,
	FOREIGN KEY ([NPCId]) REFERENCES "NPC" ([NPCId])
);

CREATE TABLE IF NOT EXISTS "Shop"
(
	[itemId] INTEGER NOT NULL,
	[itemPrice] INTEGER NOT NULL,
	[stackAmount] INTEGER NOT NULL,
	[NPCId] INTEGER NOT NULL,
	CONSTRAINT 'maxStackAmount',
	FOREIGN KEY ([itemId]) REFERENCES "Item" ([itemId]),
	FOREIGN KEY ([NPCId]) REFERENCES "NPC" ([NPCId]) ON DELETE CASCADE
);

CREATE TRIGGER IF NOT EXISTS maxStackAmountTriggerShop
BEFORE INSERT ON Shop
FOR EACH ROW
WHEN NEW.stackAmount > (SELECT maxStackSize FROM Item WHERE Item.itemId = NEW.itemId)
BEGIN
    SELECT RAISE(ABORT, 'stackAmount exceeds maxStackSize for this item');
END;

CREATE TABLE IF NOT EXISTS "Boss"
(
	[NPCId] INTEGER NOT NULL,
	FOREIGN KEY ([NPCId]) REFERENCES "NPC" ([NPCId])
);

CREATE TABLE IF NOT EXISTS "Enemy"
(
	[NPCId] INTEGER NOT NULL,
	FOREIGN KEY ([NPCId]) REFERENCES "NPC" ([NPCId])
);

CREATE TABLE IF NOT EXISTS "Passive"
(
	[isScared] BIT NOT NULL,
	[NPCId] INTEGER NOT NULL,
	FOREIGN KEY ([NPCId]) REFERENCES "NPC" ([NPCId])
);